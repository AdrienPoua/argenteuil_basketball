// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

/**
 * ****************************************
 * SECTION : MEMBERS     *
 * ****************************************
 */

model Member {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  email       String
  isPublicEmail Boolean
  phone       String
  isPublicPhone Boolean
  isLeader      Boolean
  type        Roles[]
  image       String?
  coach       Coach?
}

model Coach {
  id       String        @id @default(auto()) @map("_id") @db.ObjectId
  teams    TeamOnCoach[]
  member   Member        @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId String        @unique @db.ObjectId
}

/**
 * ****************************************
 * SECTION : TEAMS     *
 * ****************************************
 */
model Team {
  id       String          @id @default(auto()) @map("_id") @db.ObjectId
  name     String          @unique
  image    String?
  level    String
  sessions TeamOnSession[]
  coachs   TeamOnCoach[]
}

model Session {
  id    String          @id @default(auto()) @map("_id") @db.ObjectId
  day   Day
  start String
  end   String
  gym   Gymnases
  teams TeamOnSession[]
}

/**
 * ****************************************
 * SECTION : MANY_TO_MANY     *
 * ****************************************
 */

model TeamOnSession {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  team      Team    @relation(fields: [teamId], references: [id])
  teamId    String  @db.ObjectId
  session   Session @relation(fields: [sessionId], references: [id])
  sessionId String  @db.ObjectId
}

model TeamOnCoach {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  team    Team   @relation(fields: [teamId], references: [id])
  teamId  String @db.ObjectId
  coach   Coach  @relation(fields: [coachId], references: [id])
  coachId String @db.ObjectId
}

/**
 * ****************************************
 * SECTION : ENUM     *
 * ****************************************
 */

enum Day {
  Lundi
  Mardi
  Mercredi
  Jeudi
  Vendredi
  Samedi
  Dimanche
}

enum Gymnases {
  Jean_Guimier
  Jesse_Owens
}

enum Roles {
  Trésorier
  Président
  Correspondant
  Secrétaire_Général
  Entraineur
  Webmaster
}

/**
 * ****************************************
 * SECTION : MATCH     *
 * ****************************************
 */
model Match {
  id                      String   @id @default(auto()) @map("_id") @db.ObjectId
  numero                  Int
  numeroJournee           Int
  idPoule                 Int
  idOrganismeEquipe1      Int
  idOrganismeEquipe2      Int
  nomEquipe1              String
  nomEquipe2              String
  resultatEquipe1         Int?
  resultatEquipe2         Int?
  date                    DateTime
  salle                   String?
  penaliteEquipe1         Boolean?
  penaliteEquipe2         Boolean?
  forfaitEquipe1          Boolean?
  forfaitEquipe2          Boolean?
  defautEquipe1           Boolean?
  defautEquipe2           Boolean?
  validee                 Boolean
  remise                  Boolean
  joue                    Boolean
  handicap1               Int?
  handicap2               Int?
  dateSaisieResultat      String?
  creation                String?
  modification            String?
  classementPouleAssociee Int?
  competition             String?
}

/**
 * ****************************************
 * SECTION : Others     *
 * ****************************************
 */
model Club {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name  String
  email String
  phone String
}

model FAQ {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  question String
  answer   String
  position Int
}

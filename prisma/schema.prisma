// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

/**
 * ****************************************
 * SECTION : AUTH     *
 * ****************************************
 */
model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

/**
 * ****************************************
 * SECTION : MEMBERS     *
 * ****************************************
 */

model Member {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  name          String  @unique
  email         String
  isPublicEmail Boolean
  phone         String  @unique
  isPublicPhone Boolean
  isLeader      Boolean
  role          Roles[]
  image         String?
  teams         Team[]
}

/**
 * ****************************************
 * SECTION : TEAMS     *
 * ****************************************
 */
model Team {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String   @unique
  image         String?
  level         String
  sessions      Json
  coach         Member?  @relation(fields: [memberId], references: [id])
  memberId      String?  @db.ObjectId
  isCompetition Boolean
  championnats  String[]
  matchs        Match[]
}

/**
 * ****************************************
 * SECTION : ENUM     *
 * ****************************************
 */

enum Days {
  Lundi
  Mardi
  Mercredi
  Jeudi
  Vendredi
  Samedi
  Dimanche
}

enum Roles {
  Trésorier
  Président
  Correspondant
  Secrétaire_Général
  Entraineur
  Webmaster
}

/**
 * ****************************************
 * SECTION : MATCH     *
 * ****************************************
 */
model Match {
  id                      String   @id @map("_id")
  numero                  Int
  numeroJournee           Int
  idPoule                 Int
  idOrganismeEquipe1      Int
  idOrganismeEquipe2      Int
  nomEquipe1              String
  nomEquipe2              String
  resultatEquipe1         Int?
  resultatEquipe2         Int?
  date                    DateTime
  salle                   String?
  penaliteEquipe1         Boolean?
  penaliteEquipe2         Boolean?
  forfaitEquipe1          Boolean?
  forfaitEquipe2          Boolean?
  defautEquipe1           Boolean?
  defautEquipe2           Boolean?
  validee                 Boolean
  remise                  Boolean
  joue                    Boolean
  handicap1               Int?
  handicap2               Int?
  dateSaisieResultat      String?
  creation                String?
  modification            String?
  classementPouleAssociee Int?
  competition             String?
  correspondant           String?
  convocationIsSent       Boolean?
  convocationIsAsked      Boolean?
  isConvocationRecu       Boolean?
  teamId                  String?  @db.ObjectId
  team                    Team?    @relation(fields: [teamId], references: [id])
}

/**
 * ****************************************
 * SECTION : Others     *
 * ****************************************
 */
model Club {
  id      String  @id @map("_id")
  code    String
  libelle String
  email   String?
  phone   String?
}

model FAQ {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  question String @unique
  answer   String @unique
  position Int
}

/**
 * ****************************************
 * SECTION : Rate Limiting     *
 * ****************************************
 */
model ConvocationRateLimit {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  matchId    String
  lastCalled DateTime @default(now())

  @@unique([matchId])
}

model Task {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  done      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/**
 * ****************************************
 * SECTION : INSCRIPTIONS     *
 * ****************************************
 */
model Inscription {
  id            String            @id @default(auto()) @map("_id") @db.ObjectId
  nom           String
  prenom        String
  email         String
  dateNaissance DateTime
  numero        String
  surclassement Boolean           @default(false)
  Renouvellement Boolean          @default(false)
  nouvelleLicence Boolean         @default(false)
  mutation Boolean                @default(false)
  RenouvellementSansMutation Boolean @default(false)
  statut        StatutInscription @default(EN_ATTENTE)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
}

enum StatutInscription {
  EN_ATTENTE
  TRAITEE
  REJETEE
}

model Document {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  fileName      String?
  fileContent   Bytes?
  mimeType      String?
  fileSize      Int?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}
